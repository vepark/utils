data processed;
    set want;
    
    length Report1 Analysis2 Summary3 Details4 Overview5 $256;
    array cols[5] $256 Report1 Analysis2 Summary3 Details4 Overview5;

    retain pat1 pat2 pat3 pat4 pat5 Multiple_Files;
    
    if _N_ = 1 then do;
        pat1 = prxparse("/pop/i");     /* Pattern for Report1 - looking for "pop" */
        pat2 = prxparse("/all/i");     /* Pattern for Analysis2 - looking for "all" */
        pat3 = prxparse("/abc/i");     /* Pattern for Summary3 - looking for "ABC" */
        pat4 = prxparse("/exe/i");     /* Pattern for Details4 - looking for "exe" */
        pat5 = prxparse("/cddvd/i");   /* Pattern for Overview5 - looking for "cddvd" */
    end;
    
    array patterns[5] pat1 pat2 pat3 pat4 pat5;
    array file_counts[5] _temporary_ (0, 0, 0, 0, 0);

    Multiple_Files = "No";
    call missing(of Report1, Analysis2, Summary3, Details4, Overview5);

    * Iterate over each filename in the INPUTsubfolderFileNames;
    do i = 1 to countw(INPUTsubfolderFileNames, ',');
        filename = scan(INPUTsubfolderFileNames, i, ',');
        filename_no_ext = prxchange('s/\.[^\.]*$//', -1, filename); * Remove the file extension;

        * Determine which keyword pattern the filename matches;
        do j = 1 to dim(cols);
            if prxmatch(patterns[j], filename_no_ext) > 0 then do;
                if missing(cols[j]) then cols[j] = filename_no_ext;
                else Multiple_Files = "Yes";
            end;
        end;
    end;

    drop i j filename filename_no_ext pat1 pat2 pat3 pat4 pat5;
run;

proc print data=processed;
    title "Processed Dataset with Files Categorized by Keyword";
run;










data _null_;
    set processed;
    
    * Example actual file column names;
    array files[5] $256 FileA FileB FileC FileD FileE;
    
    * Prepare to pass ID1 and ID2 to the macro, not as parameters but available in the environment;
    call symputx('ID1', ID1);
    call symputx('ID2', ID2);
    
    * Dynamically assign file1 to file5 based on the non-missing values in FileA to FileE;
    do i = 1 to dim(files);
        call symputx(cats('file', i), files[i]);
    end;
    
    * Example of setting a global macro variable that might be used in your macros;
    %let idmacrovalue1 = some_value;  * This should be set based on your earlier logic or data;
    
    * Construct macro calls dynamically based on the files available;
    length macro_call $200;
    macro_call = '';
    
    * Adjust the logic to use your real file column names and macros;
    if not missing(FileA) and not missing(FileD) then do;
        macro_call = cats('%cr300(', "&file1", ', ', "&file4", ');');
        call execute(macro_call);
    end;
    else if not missing(FileA) and not missing(FileB) and not missing(FileC) and not missing(FileD) then do;
        macro_call = cats('%cr301(', "&file1", ', ', "&file2", ', ', "&file3", ', ', "&file4", ');');
        call execute(macro_call);
    end;
    else if not missing(FileD) then do;
        * Example where a global macro variable and specific file are passed;
        macro_call = cats('%cr302(', "&idmacrovalue1", ', ', "&file4", ');');
        call execute(macro_call);
    end;
    
    * Ensure IDs are used within macros without being direct parameters;
    put "ID1=" ID1 " ID2=" ID2;  * Example of how you might check or use ID1, ID2 values in logs or further processing;
    
    drop i;
run;
