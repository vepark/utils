/* Macro variables for keywords and expected matches */
%let keywords = abc bgh*klm def ghi jkl;
%let num_keywords = 5;

/* Directory to start the search */
%let start_path = /path/to/start/directory;

/* Initialize a dataset to hold the report of directories with issues */
data Report;
    length MainFolder $256 AdditionalInputs $1000;
    format MainFolder $256. AdditionalInputs $1000.;
run;

/* Initialize macro variables for filenames */
%macro initialize_filenames;
    %let abcfile = ;
    %let bghklmfile = ;
    %let deffile = ;
    %let ghifile = ;
    %let jklfile = ;
%mend initialize_filenames;

/* Main processing data step */
data _null_;
    length folder_path $256 fname $256;
    retain count_abc count_bghklm count_def count_ghi count_jkl 0;

    /* Use pipe to list all subdirectories containing an 'INPUT' subfolder */
    rc = filename('dirlist', "find &start_path. -type d -name 'INPUT' -print");
    infile dirlist truncover end=eof;

    input folder_path $char256.;

    /* Extract the main folder from the path */
    MainFolder = scan(folder_path, -2, '/');

    /* Reset the keyword file counts for this folder */
    call execute('%initialize_filenames;');
    count_abc = 0;
    count_bghklm = 0;
    count_def = 0;
    count_ghi = 0;
    count_jkl = 0;

    /* List all files within the 'INPUT' directory */
    d = dopen('dirlist');
    do i = 1 to dnum(d);
        fname = dread(d, i);

        /* Check for each keyword */
        select;
            when (index(fname, 'abc') > 0) then do;
                count_abc + 1;
                if count_abc = 1 then call symput('abcfile', scan(fname, 1, '.'));
            end;
            when (index(fname, 'bgh') > 0 and index(fname, 'klm') > 0) then do;
                count_bghklm + 1;
                if count_bghklm = 1 then call symput('bghklmfile', scan(fname, 1, '.'));
            end;
            when (index(fname, 'def') > 0) then do;
                count_def + 1;
                if count_def = 1 then call symput('deffile', scan(fname, 1, '.'));
            end;
            when (index(fname, 'ghi') > 0) then do;
                count_ghi + 1;
                if count_ghi = 1 then call symput('ghifile', scan(fname, 1, '.'));
            end;
            when (index(fname, 'jkl') > 0) then do;
                count_jkl + 1;
                if count_jkl = 1 then call symput('jklfile', scan(fname, 1, '.'));
            end;
        end;
    end;
    dclose(d);

    /* Check for any keyword with more than 1 matching file */
    if count_abc > 1 or count_bghklm > 1 or count_def > 1 or count_ghi > 1 or count_jkl > 1 then do;
        /* Report issue */
        AdditionalInputs = catx(', ',
                                ifn(count_abc > 1, 'abc', ''),
                                ifn(count_bghklm > 1, 'bgh*klm', ''),
                                ifn(count_def > 1, 'def', ''),
                                ifn(count_ghi > 1, 'ghi', ''),
                                ifn(count_jkl > 1, 'jkl', ''));
        output Report;
    end;
    else if count_abc + count_bghklm + count_def + count_ghi + count_jkl = &num_keywords then do;
        /* If exactly one match for each keyword */
        call symput('abcfile', abcfile);
        call symput('bghklmfile', bghklmfile);
        call symput('deffile', deffile);
        call symput('ghifile', ghifile);
        call symput('jklfile', jklfile);
    end;

    if eof then do;
        /* Finalize the report dataset */
        stop;
    end;
run;

/* Output the report dataset */
proc print data=Report;
run;











proc import datafile="mydata.xlsx"
    out=excel_data
    dbms=xlsx
    replace;
    sheet="Sheet1";
run;

proc transpose data=excel_data out=reshaped_data;
    var _all_;
run;

data _null_;
    set reshaped_data;
    if not missing(col1) then do;
        length clean_value $200;
        clean_value = compress(upcase(col1), , "kad");
        if clean_value ne "" then do;
            call symputx(clean_value, clean_value);
        end;
    end;
run;





%macro create_macro_vars(dataset, vars);
  %local var i count;

  proc sql noprint;
    %do i = 1 %to %sysfunc(countw(&vars));
      %let var = %scan(&vars, &i);
      select distinct &var 
        into :&var._1 - :&var._&sqlobs 
        from &dataset;
      %let count = &sqlobs;

      %do j = 1 %to &count;
        %put Macro variable &var._&j created with value &&&var._&j;
      %end;
    %end;
  quit;
%mend create_macro_vars;

/* Example usage */
%create_macro_vars(mydata, ID1 ID2);









%macro find_files_with_keywords(input_folder, keywords);
  %local keyword i file_count main_folder additional_artifacts;

  filename input_dir "&input_folder/*";

  %do i = 1 %to %sysfunc(countw(&keywords));
    %let keyword = %scan(&keywords, &i);

    data files;
      did = dopen('input_dir');
      if did > 0 then do;
        do while (not eof);
          infile = dread(did, _n_);
          if find(lowcase(infile), lowcase("&keyword")) then do;  /* Case-insensitive search */
            filename = scan(infile, -1, '\/');                   /* Get filename only */
            output;
          end;
        end;
      end;
      rc = dclose(did);
    run;

    %let file_count = &sqlobs; /* Count files found */

    proc sql noprint;
      select filename into :&keyword  
      from files;

      %if &file_count > 1 %then %do;
        select filename into :additional_artifacts separated by ' ' 
        from files;
        %let main_folder = %sysfunc(pathname(&input_folder)); 
      %end;
    quit;

    %if &file_count = 0 %then %put WARNING: No files found for keyword &keyword;
    %else %if &file_count = 1 %then %put Macro variable &keyword created with value &&&keyword;
    %else %do;
      %put WARNING: Multiple files found for keyword &keyword;
      %put Additional files stored in macro variable AdditionalArtifacts&keyword;
      %put Main folder stored in macro variable MainFolder&keyword;
    %end;
  %end;
%mend find_files_with_keywords;

/* Example usage */
%let input_folder = /path/to/your/input_folder; /* Update this with your actual path */
%let keywords = abcd efgh ijkl mnop qrst;

%find_files_with_keywords(&input_folder, &keywords);
