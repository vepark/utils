#!/bin/bash

# Define the root directory to search
SEARCH_DIR="/path/to/search/root"

# Define the output CSV file path
OUTPUT_CSV="/path/to/output/files_list.csv"

# Write the CSV header
echo "REDFolderName,INPUTsubfolderFileNames" > "$OUTPUT_CSV"

# Find all directories starting with RED and containing an INPUT folder
find "$SEARCH_DIR" -type d -name 'RED*' | while read -r red_folder; do
  if [ -d "$red_folder/INPUT" ]; then
    # Extract just the name of the RED folder
    red_folder_name=$(basename "$red_folder")

    # List all files in the INPUT subfolder, join with commas, avoid directories
    input_files=$(find "$red_folder/INPUT" -type f -exec basename {} \; | tr '\n' ',' | sed 's/,$//')

    # Only write to CSV if there are actual files
    if [ ! -z "$input_files" ]; then
      echo "$red_folder_name,\"$input_files\"" >> "$OUTPUT_CSV"
    fi
  fi
done





chmod +x list_files.sh
./list_files.sh


/* Import the CSV file created by the shell script */
proc import datafile="/path/to/output/files_list.csv"
    out=want
    dbms=csv
    replace;
    getnames=yes;
run;

/* Display the dataset */
proc print data=want;
run;













data processed;
    set want;
    
    length file1-file5 $256 Multiple_Files $3;
    array files[5] $256 file1-file5;
    
    * Define patterns for each of the 5 file types, case-insensitive;
    array patterns[5] $50 _temporary_ (
        '(?i).*final.*pop.*',   /* Example pattern for file1 */
        '(?i).*def.*456.*',     /* Example pattern for file2 */
        '(?i).*ghi.*789.*',     /* Example pattern for file3 */
        '(?i).*jkl.*012.*',     /* Example pattern for file4 */
        '(?i).*mno.*345.*'      /* Example pattern for file5 */
    );
    
    array file_counts[5] _temporary_ (0, 0, 0, 0, 0);

    Multiple_Files = "No";

    * Iterate over each filename in the INPUTsubfolderFileNames;
    do i = 1 to countw(INPUTsubfolderFileNames, ',');
        filename = scan(INPUTsubfolderFileNames, i, ',');
        filename_no_ext = prxchange('s/\.[^\.]*$//', -1, filename); * Remove the file extension;

        * Determine which keyword pattern the filename matches;
        do j = 1 to dim(patterns);
            if prxmatch(patterns[j], filename_no_ext) > 0 then do;
                file_counts[j] + 1;
                if file_counts[j] = 1 then files[j] = filename_no_ext;
                else do;
                    Multiple_Files = "Yes";
                    leave;
                end;
            end;
        end;
    end;

    drop i j filename filename_no_ext;
run;

proc print data=processed;
    title "Processed Dataset with Files Categorized by Pattern";
run;











data processed;
    set want;
    
    length file1-file5 $256 Multiple_Files $3;
    array files[5] $256 file1-file5;
    
    * Define patterns in lower case using patterns array;
    array patterns[5] $256 _temporary_ (
        ".*final.*pop.*",   /* Pattern for file1 */
        ".*def.*456.*",     /* Pattern for file2 */
        ".*ghi.*789.*",     /* Pattern for file3 */
        ".*jkl.*012.*",     /* Pattern for file4 */
        ".*mno.*345.*"      /* Pattern for file5 */
    );
    
    array file_counts[5] _temporary_ (0, 0, 0, 0, 0);
    
    * Compile regex patterns for case-insensitive match;
    if _N_ = 1 then do;
        do i = 1 to dim(patterns);
            call symputx(cats('pat', i), prxparse(cats('/(?i)', patterns[i], '/')));
        end;
    end;

    Multiple_Files = "No";
    
    * Iterate over each filename in the INPUTsubfolderFileNames;
    do i = 1 to countw(INPUTsubfolderFileNames, ',');
        filename = scan(INPUTsubfolderFileNames, i, ',');
        filename_no_ext = prxchange('s/\.[^\.]*$//', -1, filename); * Remove the file extension;

        * Determine which keyword pattern the filename matches using compiled patterns;
        do j = 1 to dim(files);
            patternId = symget(cats('pat', j));
            if prxmatch(patternId, filename_no_ext) > 0 then do;
                file_counts[j] + 1;
                if file_counts[j] = 1 then files[j] = filename_no_ext;
                else do;
                    Multiple_Files = "Yes";
                    leave;
                end;
            end;
        end;
    end;

    drop i j filename filename_no_ext patternId;
run;

proc print data=processed;
    title "Processed Dataset with Files Categorized by Pattern";
run;

