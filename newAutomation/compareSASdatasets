/* Get the column information from both datasets */
proc contents data=dataset1 out=contents1(keep=name type length) noprint;
run;

proc contents data=dataset2 out=contents2(keep=name type length) noprint;
run;

/* Find the matching columns by length and name pattern */
proc sql;
    create table matching_columns as
    select a.name as col1, b.name as col2, a.type as type1, b.type as type2
    from contents1 as a, contents2 as b
    where (a.length between 8 and 17) and (b.length between 8 and 17)
      and (index(upcase(a.name), '_ID') > 0 or index(upcase(a.name), '_NO') > 0 or index(upcase(a.name), '_NUMBER') > 0)
      and (index(upcase(b.name), '_ID') > 0 or index(upcase(b.name), '_NO') > 0 or index(upcase(b.name), '_NUMBER') > 0);
quit;


%macro compare_columns;
    %local dsid nrows rc i col1 col2 type1 type2 key1 key2;
    
    /* Open the matching_columns dataset */
    %let dsid = %sysfunc(open(matching_columns));

    /* Get the number of rows in matching_columns */
    %let nrows = %sysfunc(attrn(&dsid, nlobs));

    /* Loop through each row in matching_columns */
    %do i = 1 %to &nrows;
        %let rc = %sysfunc(fetchobs(&dsid, &i));
        %let col1 = %sysfunc(getvarc(&dsid, %sysfunc(varnum(&dsid, col1))));
        %let col2 = %sysfunc(getvarc(&dsid, %sysfunc(varnum(&dsid, col2))));
        %let type1 = %sysfunc(getvarn(&dsid, %sysfunc(varnum(&dsid, type1))));
        %let type2 = %sysfunc(getvarn(&dsid, %sysfunc(varnum(&dsid, type2))));

        /* Convert numeric columns to character for comparison */
        data dataset1_mod;
            set dataset1;
            %if &type1 = 1 %then %do;
                key1_mod = put(&col1, $20.);
            %end;
            %else %do;
                key1_mod = &col1;
            %end;
        run;

        data dataset2_mod;
            set dataset2;
            %if &type2 = 1 %then %do;
                key2_mod = put(&col2, $20.);
            %end;
            %else %do;
                key2_mod = &col2;
            %end;
        run;

        /* Perform the comparison */
        proc sql;
            create table comparison_&i as
            select a.key1_mod as key1_value, b.key2_mod as key2_value,
                   case when a.key1_mod = b.key2_mod then 1 else 0 end as match_flag
            from dataset1_mod as a
            full join dataset2_mod as b
            on a.key1_mod = b.key2_mod;
        quit;

        /* Calculate the total matches and match percentage */
        proc sql;
            select sum(match_flag) as match_count, 
                   count(*) as total_count,
                   calculated match_count / calculated total_count as match_percentage format=percent8.2
            into :match_count_&i, :total_count_&i, :match_percentage_&i
            from comparison_&i;
        quit;

        %put Match Count: &&match_count_&i;
        %put Total Count: &&total_count_&i;
        %put Match Percentage: &&match_percentage_&i;

        /* Filter for 90% or more matches */
        data final_matches_&i;
            set comparison_&i;
            if match_flag = 1 then output;
        run;

        /* Check if match percentage is 90% or more */
        %macro check_match_percentage(i);
            %if &&match_percentage_&i >= 0.90 %then %do;
                proc print data=final_matches_&i;
                    title "Rows with Matching Key Columns (&&col1 and &&col2)";
                run;
            %end;
            %else %do;
                %put The match percentage for column pair &&col1 and &&col2 is less than 90%;
            %end;
        %mend;

        %check_match_percentage(&i);

    %end;

    /* Close the matching_columns dataset */
    %let rc = %sysfunc(close(&dsid));
%mend;

%compare_columns;
