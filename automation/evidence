import os
import fnmatch
import pandas as pd
from openpyxl import Workbook
from openpyxl.utils import get_column_letter
from openpyxl.utils.dataframe import dataframe_to_rows
from concurrent.futures import ThreadPoolExecutor, as_completed
from pathlib import Path

def find_matching_files(directory, patterns):
    matching_files = {pattern: [] for pattern in patterns}
    for root, dirs, files in os.walk(directory):
        for file in files:
            for pattern in patterns:
                if fnmatch.fnmatch(file.lower(), pattern.lower()):
                    file_path = os.path.join(root, file)
                    matching_files[pattern].append(file_path)
    return matching_files

def adjust_column_width(ws):
    for column_cells in ws.columns:
        length = max(len(str(cell.value)) for cell in column_cells)
        ws.column_dimensions[get_column_letter(column_cells[0].column)].width = length + 2

def process_main_folder(main_folder_path, sub_folder_patterns, file_patterns):
    data = []
    # Convert main_folder_path to an absolute path to avoid issues with relative paths in threads
    main_folder_path = Path(main_folder_path).resolve()
    for sub_folder_pattern in sub_folder_patterns:
        for root, dirs, files in os.walk(main_folder_path):
            for dir_name in fnmatch.filter(dirs, f"*{sub_folder_pattern}*"):
                sub_folder_path = os.path.join(root, dir_name)
                row = {'ID1': main_folder_path.name, 'ID2': dir_name}
                for pattern in file_patterns:
                    matching_files = find_matching_files(sub_folder_path, [pattern])
                    files = [os.path.basename(file) for file in matching_files[pattern]]
                    key = pattern.split('*')[1].capitalize()  # Simplify the column name
                    row[key] = ', '.join(files) if files else 'NO FILES FOUND'
                data.append(row)
    return data

# User inputs
base_path = "C:/base/folder/path"  # Update this path
main_folders = ['12345678', '87654321']  # Update these folder names
sub_folder_patterns = ['1234', '5678']  # Update these patterns
file_patterns = ['*workbook*.xlsx', '*workbook*.xls', '*clear*.msg', '*evidence*document*.xlsx', '*evidence*document*.xls']

# The rest of
# Normalize and prepare the inputs
main_folders = [os.path.join(base_path, folder.strip()) for folder in main_folders]
sub_folder_patterns = [pattern.strip() for pattern in sub_folder_patterns]

# Parallel processing
data = []
with ThreadPoolExecutor() as executor:
    futures = [executor.submit(process_main_folder, main_folder, sub_folder_patterns, file_patterns) for main_folder in main_folders]
    for future in as_completed(futures):
        data.extend(future.result())

# Convert to DataFrame and save as Excel
df = pd.DataFrame(data)
wb = Workbook()
ws = wb.active
for r in dataframe_to_rows(df, index=False, header=True):
    ws.append(r)
adjust_column_width(ws)

# Save the Excel file
excel_file = 'output_parallel.xlsx'
wb.save(excel_file)

print("Excel file has been created successfully in 'output_parallel.xlsx'.")







# Define the base path where main folders are located and the main folders
$basePath = "C:\Your\BasePath"
$mainFolders = @("12345678", "23456789") # Update with your main folder names
$subFolderPatterns = @("1234", "5678") # Patterns to match in sub-folder names
$filePatterns = @('*workbook*.xlsx', '*workbook*.xls', '*clear*.msg', '*evidence*document*.xlsx', '*evidence*document*.xls')

# PowerShell 7+ required for -Parallel
$results = $mainFolders | ForEach-Object -Parallel {
    $mainFolderPath = Join-Path -Path $using:basePath -ChildPath $_
    $data = @()
    Get-ChildItem -Path $mainFolderPath -Recurse -Directory | ForEach-Object {
        $subFolder = $_
        $subFolderName = $subFolder.Name
        # Check if subFolder matches any pattern
        $matchFound = $false
        foreach ($pattern in $using:subFolderPatterns) {
            if ($subFolderName -like "*$pattern*") {
                $matchFound = $true
                break
            }
        }
        if ($matchFound) {
            $record = [PSCustomObject]@{
                MainFolder = Split-Path $subFolder.FullName -Leaf
                SubFolder = $subFolder.Name
                WorkbookFiles = $null
                ClearFiles = $null
                EvidenceFiles = $null
            }
            # Search for files matching patterns within the sub-folder
            Get-ChildItem -Path $subFolder.FullName -File -Recurse | ForEach-Object {
                $file = $_
                if ($file.Name -like $using:filePatterns[0] -or $file.Name -like $using:filePatterns[1]) {
                    $record.WorkbookFiles += $file.Name + "; "
                } elseif ($file.Name -like $using:filePatterns[2]) {
                    $record.ClearFiles += $file.Name + "; "
                } elseif ($file.Name -like $using:filePatterns[3] -or $file.Name -like $using:filePatterns[4]) {
                    $record.EvidenceFiles += $file.Name + "; "
                }
            }
            # Finalize the record
            $record.WorkbookFiles = if ($record.WorkbookFiles) { $record.WorkbookFiles.TrimEnd("; ") } else { "NO FILES FOUND" }
            $record.ClearFiles = if ($record.ClearFiles) { $record.ClearFiles.TrimEnd("; ") } else { "NO FILES FOUND" }
            $record.EvidenceFiles = if ($record.EvidenceFiles) { $record.EvidenceFiles.TrimEnd("; ") } else { "NO FILES FOUND" }
            $data += $record
        }
    }
    $data
} -ThrottleLimit 4

# Export to Excel
$results | Export-Excel -Path "C:\Path\To\output.xlsx" -AutoSize

Write-Host "Excel file has been created successfully."
