param (
    [string]$BasePath = "C:\Your\Base Path With Spaces",
    [string]$DestinationPath = "\\server.com\folder1\folder2",
    [string]$ID1 = "12345,23456",
    [string]$ID2 = "2345,3456"
)

# Convert comma-separated strings to arrays
$ID1Array = $ID1 -split ","
$ID2Array = $ID2 -split ","

# Ensure the destination path exists
if (-not (Test-Path -Path $DestinationPath)) {
    New-Item -ItemType Directory -Path $DestinationPath | Out-Null
}

$results = @()
$summarySheetStats = @()
$combinedSheetData = @()
$missedEntries = @()
$combinedSummary = @()
$fileInfo = @()

function Log-Message {
    param (
        [string]$message
    )
    Write-Output $message
}

function Get-ExcelSheetNames {
    param (
        [string]$filePath
    )
    try {
        $sheetNames = (Import-Excel -Path $filePath -NoHeader | Get-Member -MemberType NoteProperty).Name
        return -join ($sheetNames -join ", ")
    } catch {
        Log-Message "Error reading sheet names from $($filePath): $($_)"
        return ""
    }
}

function Get-SheetContent {
    param (
        [string]$filePath,
        [string[]]$sheetNames
    )
    $filteredData = @()
    $missedEntriesLocal = @()
    try {
        foreach ($sheetName in $sheetNames) {
            if ($sheetName -match "^(101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|219|220|221|222|223|224|225|226|227|228|229|230|231|232|301|302|303|304|305|306|307|308|309|310|311|312|313|314|315|316|317|318|319|320)$") {
                $sheetData = Import-Excel -Path $filePath -WorksheetName $sheetName
                foreach ($row in $sheetData) {
                    $question = $row.'C'
                    $answer = $row.'D'
                    if ($question -and $question -match ":$" -and -not $question.StartsWith("Note:") -and $answer -notin @("PASS", "NA", "YES", "NO")) {
                        $filteredRow = [PSCustomObject]@{
                            MainFolder = (Get-Item $filePath).Parent.Parent.Name
                            SubFolder  = (Get-Item $filePath).Parent.Name
                            FileName   = (Get-Item $filePath).Name
                            SheetName  = $sheetName
                            Question   = $question
                            Answer     = $answer
                        }
                        $filteredData += $filteredRow
                        if (-not $answer) {
                            $missedEntriesLocal += $filteredRow
                        }
                    }
                }
            }
        }
    } catch {
        Log-Message "Error reading sheet content from $($filePath): $($_)"
    }
    return @($filteredData, $missedEntriesLocal)
}

function Copy-FileToDestination {
    param (
        [string]$sourcePath,
        [string]$destinationFolder
    )
    try {
        if (-not (Test-Path -Path $destinationFolder)) {
            New-Item -ItemType Directory -Path $destinationFolder | Out-Null
        }
        Copy-Item -Path $sourcePath -Destination $destinationFolder
    } catch {
        Log-Message "Error copying file $($sourcePath) to $($destinationFolder): $($_)"
    }
}

function Find-AllFiles {
    param (
        [string]$path
    )
    return Get-ChildItem -Path $path -Recurse -File | Select-Object -ExpandProperty FullName
}

function Process-Folder {
    param (
        [string]$mainFolder
    )
    $mainFolderPath = Join-Path -Path $BasePath -ChildPath $mainFolder
    Log-Message "Processing main folder: $mainFolderPath"
    
    if (-not (Test-Path -Path $mainFolderPath)) {
        Log-Message "Main folder path does not exist: $mainFolderPath"
        return
    }

    Get-ChildItem -Path $mainFolderPath -Recurse -Directory | ForEach-Object {
        $subFolder = $_
        if ($ID2Array -contains $subFolder.Name) {
            $subFolderPath = $subFolder.FullName
            Log-Message "Processing subfolder: $subFolderPath"

            $latestFile = Get-ChildItem -Path $subFolderPath -Recurse -File -Filter "*Evidence*Document*.xlsx" | Sort-Object LastWriteTime -Descending | Select-Object -First 1

            if ($latestFile) {
                $record = [PSCustomObject]@{
                    MainFolder = $mainFolder
                    SubFolder  = $subFolder.Name
                    FileName   = $latestFile.Name
                    ModifiedDate = $latestFile.LastWriteTime
                    SizeKB     = [math]::Round($latestFile.Length / 1KB, 2)
                    SheetNames = Get-ExcelSheetNames -filePath $latestFile.FullName
                }

                $sheetNames = $record.SheetNames -split ", "
                $sheetContent = Get-SheetContent -filePath $latestFile.FullName -sheetNames $sheetNames
                $sheetData = $sheetContent[0]
                $missedData = $sheetContent[1]
                $combinedSheetData += $sheetData
                $missedEntries += $missedData

                $totalEntries = $sheetData.Count
                $totalMissedEntries = $missedData.Count
                $percentCompletion = if ($totalEntries -ne 0) { [math]::Round((($totalEntries - $totalMissedEntries) / $totalEntries) * 100, 2) } else { 0 }

                $summarySheetStats += [PSCustomObject]@{
                    MainFolder = $mainFolder
                    SubFolder  = $subFolder.Name
                    FileName   = $latestFile.Name
                    TemplateUsed = "Yes"
                    SheetNames = $record.SheetNames
                    TotalEntries = $totalEntries
                    TotalMissedEntries = $totalMissedEntries
                    PercentCompletion = $percentCompletion
                }

                try {
                    $summaryData = Import-Excel -Path $latestFile.FullName -WorksheetName "Summary"
                    $dmsFiles = $summaryData | Where-Object { $_.'DMS file name' } | Select-Object -ExpandProperty 'DMS file name'
                    foreach ($dmsFile in $dmsFiles) {
                        $dmsPresence = if (Get-ChildItem -Path $subFolderPath -Recurse -File -Filter $dmsFile) { "Yes" } else { "No" }
                        $combinedSummary += [PSCustomObject]@{
                            MainFolder = $mainFolder
                            SubFolder  = $subFolder.Name
                            FileName   = $latestFile.Name
                            DMSFileName = $dmsFile
                            DMSPresence = $dmsPresence
                        }
                    }
                } catch {
                    Log-Message "Error reading summary sheet from $($latestFile.FullName): $($_)"
                }

                Copy-FileToDestination -sourcePath $latestFile.FullName -destinationFolder $DestinationPath
            } else {
                $record = [PSCustomObject]@{
                    MainFolder = $mainFolder
                    SubFolder  = $subFolder.Name
                    FileName   = "No ED file"
                    ModifiedDate = $null
                    SizeKB     = $null
                    SheetNames = $null
                }
            }

            $clearanceEmail = Get-ChildItem -Path $subFolderPath -Recurse -File -Filter "*clear*.msg" | Select-Object -First 1
            $evidenceWorkbook = Get-ChildItem -Path $subFolderPath -Recurse -File -Filter "*Evidence*workbook*.xlsx" | Select-Object -First 1
            $peerReviewWorkbook = Get-ChildItem -Path $subFolderPath -Recurse -File -Filter "*peer*workbook*.xlsx" | Select-Object -First 1
            $prescreenWorkbook = Get-ChildItem -Path $subFolderPath -Recurse -File -Filter "*prescreen*workbook*.xlsx" | Select-Object -First 1
            $daqWorkbook = Get-ChildItem -Path $subFolderPath -Recurse -File -Filter "*DAQ*workbook*.xlsx" | Select-Object -First 1

            $fileInfo += [PSCustomObject]@{
                MainFolder = $mainFolder
                SubFolder  = $subFolder.Name
                EDPresence = if ($latestFile) { "Yes ($($latestFile.Name))" } else { "No" }
                ClearanceEmail = if ($clearanceEmail) { "Yes ($($clearanceEmail.Name))" } else { "No" }
                EvidenceWorkbook = if ($evidenceWorkbook) { "Yes ($($evidenceWorkbook.Name))" } else { "No" }
                PeerReviewWorkbook = if ($peerReviewWorkbook) { "Yes ($($peerReviewWorkbook.Name))" } else { "No" }
                PreScreenWorkbook = if ($prescreenWorkbook) { "Yes ($($prescreenWorkbook.Name))" } else { "No" }
                DAQworkbook = if ($daqWorkbook) { "Yes ($($daqWorkbook.Name))" } else { "No" }
                AllFileNames = (Get-ChildItem -Path $subFolderPath -Recurse -File | Select-Object -ExpandProperty Name) -join "; "
            }

            $results += $record
        }
    }
}

foreach ($mainFolder in $ID1Array) {
    Process-Folder -mainFolder $mainFolder
}

# Export results to Excel
$excelPath = Join-Path -Path $DestinationPath -ChildPath "FullReport.xlsx"

$results | Export-Excel -Path $excelPath -WorksheetName "EDSummary" -Show
$summarySheetStats | Export-Excel -Path $excelPath -WorksheetName "SummarySheetStats" -Append
$combinedSheetData | Export-Excel -Path $excelPath -WorksheetName "CombinedSheets" -Append
$missedEntries | Export-Excel -Path $excelPath -WorksheetName "MissedEntries" -Append
$combinedSummary | Export-Excel -Path $excelPath -WorksheetName "CombinedSummary" -Append
$fileInfo | Export-Excel -Path $excelPath -WorksheetName "FileInfo" -Append

Log-Message "Excel file has been created successfully."
