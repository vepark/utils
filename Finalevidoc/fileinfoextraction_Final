param(
    [string[]]$ID1,
    [string[]]$ID2
)

# Split the comma-separated values into arrays
$mainFolders = $ID1 -split ","
$subFolderPatterns = $ID2 -split ","

# Define the base path where main folders are located and specify the destination path
$basePath = "C:\Your\BasePath"  # Update with your actual base path
$destinationPath = "\\server.com\folder1\folder2"  # Update with your actual destination path

# Ensure the destination path exists
if (-not (Test-Path -Path $destinationPath)) {
    New-Item -ItemType Directory -Path $destinationPath | Out-Null
}

# Prepare arrays to collect results
$results = @()
$summaryResults = @()
$combinedSheetData = @()
$missedEntries = @()
$combinedSummary = @()
$fileInfo = @()

function Log-Message {
    param (
        [string]$message
    )
    Write-Host $message
}

function Get-ExcelSheetNames {
    param (
        [string]$filePath
    )
    $excel = New-Object -ComObject Excel.Application
    $excel.Visible = $false
    $workbook = $excel.Workbooks.Open($filePath)
    $sheetNames = @()
    foreach ($sheet in $workbook.Sheets) {
        $sheetNames += $sheet.Name
    }
    $workbook.Close($false)
    $excel.Quit()
    [System.Runtime.InteropServices.Marshal]::ReleaseComObject($excel) | Out-Null
    return -join $sheetNames -join ", "
}

function Get-SheetContent {
    param (
        [string]$filePath,
        [string[]]$sheetNames
    )
    $filteredData = @()
    foreach ($sheet in $sheetNames) {
        if ($sheet -match '^(101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|219|220|221|222|223|224|225|226|227|228|229|230|231|232|301|302|303|304|305|306|307|308|309|310|311|312|313|314|315|316|317|318|319|320)$') {
            $sheetData = Import-Excel -Path $filePath -WorksheetName $sheet -StartRow 1
            foreach ($row in $sheetData) {
                if ($row.C -notlike "Note:*" -and $row.C -like "*:" -and ($row.D -ne "PASS" -and $row.D -ne "NA" -and $row.D -ne "YES" -and $row.D -ne "NO")) {
                    $filteredRow = [PSCustomObject][ordered]@{
                        MainFolder = $filePath.Split('\')[-3]
                        SubFolder = $filePath.Split('\')[-2]
                        FileName = $filePath.Split('\')[-1]
                        SheetName = $sheet
                        Question = $row.C
                        Answer = $row.D
                    }
                    $filteredData += $filteredRow
                    if ($row.D -eq $null) {
                        $missedEntries += $filteredRow
                    }
                }
            }
        }
    }
    return $filteredData
}

foreach ($mainFolder in $mainFolders) {
    $mainFolderPath = Join-Path -Path $basePath -ChildPath $mainFolder
    Log-Message "Processing main folder: $mainFolderPath"
    
    if (-not (Test-Path -Path $mainFolderPath)) {
        Log-Message "Main folder path does not exist: $mainFolderPath"
        continue
    }

    Get-ChildItem -Path $mainFolderPath -Directory | ForEach-Object {
        $subFolder = $_
        $subFolderName = $subFolder.Name
        # Check if subFolder matches any pattern
        $matchFound = $false
        foreach ($pattern in $subFolderPatterns) {
            if ($subFolderName -like "*$pattern*") {
                $matchFound = $true
                break
            }
        }
        if ($matchFound) {
            $subFolderPath = $subFolder.FullName
            Log-Message "Processing subfolder: $subFolderPath"
            
            if (-not (Test-Path -Path $subFolderPath)) {
                Log-Message "Subfolder path does not exist: $subFolderPath"
                continue
            }

            # Find the latest file matching the pattern
            $latestFile = Get-ChildItem -Path $subFolderPath -Filter $filePattern -File | 
                          Sort-Object LastWriteTime -Descending | Select-Object -First 1
            
            # Initialize object to hold folder and file information
            $record = [PSCustomObject][ordered]@{
                MainFolder = $mainFolder
                SubFolder = $subFolderName
                FileName = $null
                ModifiedDate = $null
                SizeKB = $null
                SheetNames = $null
                ALLfilenames = $null
            }
            
            if ($latestFile) {
                $record.FileName = $latestFile.Name
                $record.ModifiedDate = $latestFile.LastWriteTime
                $record.SizeKB = [math]::Round($latestFile.Length / 1KB, 2)
                $record.SheetNames = Get-ExcelSheetNames -filePath $latestFile.FullName
                
                # Get all filenames in the subfolder
                $allFiles = Get-ChildItem -Path $subFolderPath -File -Recurse
                $record.ALLfilenames = ($allFiles | Select-Object -ExpandProperty Name) -join "; "
                
                # Extract and process content from specified sheets
                $sheetNames = $record.SheetNames -split ", "
                $sheetData = Get-SheetContent -filePath $latestFile.FullName -sheetNames $sheetNames
                $combinedSheetData += $sheetData

                # Extract DMS file names from the summary sheet
                $summaryData = Import-Excel -Path $latestFile.FullName -WorksheetName "Summary" -StartRow 2
                $dmsFiles = $summaryData | Where-Object { $_.'DMS file name' -match '.*' } | Select-Object -ExpandProperty 'DMS file name'
                foreach ($dmsFile in $dmsFiles) {
                    $dmsPresence = if ($allFiles | Where-Object { $_.Name -eq $dmsFile }) { "Yes" } else { "No" }
                    $summaryRecord = [PSCustomObject][ordered]@{
                        MainFolder = $mainFolder
                        SubFolder = $subFolderName
                        DMSFileName = $dmsFile
                        DMSPresence = $dmsPresence
                    }
                    $combinedSummary += $summaryRecord
                }
                
                # Collect sheet statistics for EDSummary
                $totalEntries = $sheetData.Count
                $totalMissedEntries = ($sheetData | Where-Object { $_.Answer -eq $null }).Count
                $percentCompletion = if ($totalEntries -ne 0) { [math]::Round((($totalEntries - $totalMissedEntries) / $totalEntries) * 100, 2) } else { 0 }
                
                $templateUsed = if ($sheetNames -match '^(101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|219|220|221|222|223|224|225|226|227|228|229|230|231|232|301|302|303|304|305|306|307|308|309|310|311|312|313|314|315|316|317|318|319|320)$') { "Yes" } else { "No" }

                $summarySheetStats += [PSCustomObject][ordered]@{
                    MainFolder = $mainFolder
                    SubFolder = $subFolderName
                    FileName = $latestFile.Name
                    TemplateUsed = $templateUsed
                    SheetNames = $record.SheetNames
                    TotalEntries = $totalEntries
                    TotalMissedEntries = $totalMissedEntries
                    PercentCompletion = $percentCompletion
                }
            }
            
            # Add the record to results
            $results += $record

            # Collect file information for File_Info sheet
            $fileInfoRecord = [PSCustomObject][ordered]@{
                MainFolder = $mainFolder
                SubFolder = $subFolderName
                EDPresence = if ($latestFile) { "Yes ($($latestFile.Name))" } else { "No" }
                ClearanceEmail = if ($allFiles | Where-Object { $_.Name -like "*clear*.msg" }) { "Yes ($($_.Name))" } else { "No" }
                EvidenceWorkbook = if ($allFiles | Where-Object { $_.Name -like "*Evidence*workbook*.xlsx" }) { "Yes ($($_.Name))" } else { "No" }
                PeerReviewWorkbook = if ($allFiles | Where-Object { $_.Name -like "*Peerreview*workbook*.xlsx" }) { "Yes ($($_.Name))" } else { "No" }
                PreScreenWorkbook = if ($allFiles | Where-Object { $_.Name -like "*prescreen*workbook*.xlsx" }) { "Yes ($($_.Name))" } else { "No" }
                DAQworkbook = if ($allFiles | Where-Object { $_.Name -like "*DAQ*workbook*.xlsx" }) { "Yes ($($_.Name))" } else { "No" }
                AllFileNames = $record.ALLfilenames
            }
            $fileInfo += $fileInfoRecord
        }
    }
}

# Commented out CSV exports
# $results | Export-Csv -Path (Join-Path -Path $destinationPath -ChildPath "output.csv") -NoTypeInformation -Encoding UTF8
# $summaryResults | Export-Csv -Path (Join-Path -Path $destinationPath -ChildPath "Summary.csv") -NoTypeInformation -Encoding UTF8
# $combinedSheetData | Export-Csv -Path (Join-Path -Path $destinationPath -ChildPath "CombinedSheets.csv") -NoTypeInformation -Encoding UTF8
# $missedEntries | Export-Csv -Path (Join-Path -Path $destinationPath -ChildPath "MissedEntries.csv") -NoTypeInformation -Encoding UTF8
# $combinedSummary | Export-Csv -Path (Join-Path -Path $destinationPath -ChildPath "CombinedSummary.csv") -NoTypeInformation -Encoding UTF8
# $fileInfo | Export-Csv -Path (Join-Path -Path $destinationPath -ChildPath "FileInfo.csv") -NoTypeInformation -Encoding UTF8
# $summarySheetStats | Export-Csv -Path (Join-Path -Path $destinationPath -ChildPath "EDSummary.csv") -NoTypeInformation -Encoding UTF8

# Export results to Excel
$results | Export-Excel -Path (Join-Path -Path $destinationPath -ChildPath "Output.xlsx") -WorksheetName "Output"
$summaryResults | Export-Excel -Path (Join-Path -Path $destinationPath -ChildPath "Summary.xlsx") -WorksheetName "Summary"
$combinedSheetData | Export-Excel -Path (Join-Path -Path $destinationPath -ChildPath "CombinedSheets.xlsx") -WorksheetName "CombinedSheets"
$missedEntries | Export-Excel -Path (Join-Path -Path $destinationPath -ChildPath "MissedEntries.xlsx") -WorksheetName "MissedEntries"
$combinedSummary | Export-Excel -Path (Join-Path -Path $destinationPath -ChildPath "CombinedSummary.xlsx") -WorksheetName "CombinedSummary"
$fileInfo | Export-Excel -Path (Join-Path -Path $destinationPath -ChildPath "FileInfo.xlsx") -WorksheetName "FileInfo"
$summarySheetStats | Export-Excel -Path (Join-Path -Path $destinationPath -ChildPath "EDSummary.xlsx") -WorksheetName "EDSummary"

# Export all sheets into a single Excel file
$excelFilePath = Join-Path -Path $destinationPath -ChildPath "FullReport.xlsx"
$results | Export-Excel -Path $excelFilePath -WorksheetName "Evidence Document Summary" -Show -AutoSize
$combinedSheetData | Export-Excel -Path $excelFilePath -WorksheetName "CombinedSheets" -Append -AutoSize
$missedEntries | Export-Excel -Path $excelFilePath -WorksheetName "MissedEntries" -Append -AutoSize
$combinedSummary | Export-Excel -Path $excelFilePath -WorksheetName "CombinedSummary" -Append -AutoSize
$fileInfo | Export-Excel -Path $excelFilePath -WorksheetName "File_Info" -Append -AutoSize

Write-Host "Excel files have been created successfully."
