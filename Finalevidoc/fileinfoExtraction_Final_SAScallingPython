import os
import shutil
import pandas as pd
from openpyxl import load_workbook
from concurrent.futures import ThreadPoolExecutor
import argparse

# Define your paths and lists here
base_path = "C:\\Your\\Base Path With Spaces"
destination_path = "\\\\server.com\\folder1\\folder2"
id1_list = ["12345", "23456"]
id2_list = ["2345", "3456"]

# Ensure the destination path exists
os.makedirs(destination_path, exist_ok=True)

results = []
summary_sheet_stats = []
combined_sheet_data = []
missed_entries = []
combined_summary = []
file_info = []

def log_message(message):
    print(message)

def get_excel_sheet_names(file_path):
    try:
        workbook = load_workbook(file_path, read_only=True)
        sheet_names = workbook.sheetnames
        workbook.close()
        return ", ".join(sheet_names)
    except Exception as e:
        log_message(f"Error reading sheet names from {file_path}: {e}")
        return ""

def get_sheet_content(file_path, sheet_names):
    filtered_data = []
    missed_entries_local = []
    try:
        for sheet_name in sheet_names:
            if any(sheet_name.startswith(str(num)) for num in range(101, 121)) or \
               any(sheet_name.startswith(str(num)) for num in range(201, 233)) or \
               any(sheet_name.startswith(str(num)) for num in range(301, 321)):
                df = pd.read_excel(file_path, sheet_name=sheet_name)
                for _, row in df.iterrows():
                    if isinstance(row['C'], str) and row['C'].endswith(":") and not row['C'].startswith("Note:") and \
                       isinstance(row['D'], str) and row['D'] not in ["PASS", "NA", "YES", "NO"]:
                        filtered_row = {
                            "MainFolder": file_path.split(os.sep)[-3],
                            "SubFolder": file_path.split(os.sep)[-2],
                            "FileName": os.path.basename(file_path),
                            "SheetName": sheet_name,
                            "Question": row['C'],
                            "Answer": row['D']
                        }
                        filtered_data.append(filtered_row)
                        if pd.isnull(row['D']):
                            missed_entries_local.append(filtered_row)
    except Exception as e:
        log_message(f"Error reading sheet content from {file_path}: {e}")
    return filtered_data, missed_entries_local

def copy_file_to_destination(source_path, destination_folder):
    try:
        os.makedirs(destination_folder, exist_ok=True)
        shutil.copy2(source_path, destination_folder)
    except Exception as e:
        log_message(f"Error copying file {source_path} to {destination_folder}: {e}")

def find_all_files(path):
    all_files = []
    for root, _, files in os.walk(path):
        for file in files:
            all_files.append(os.path.join(root, file))
    return all_files

def process_folder(main_folder):
    main_folder_path = os.path.join(base_path, main_folder)
    log_message(f"Processing main folder: {main_folder_path}")
    
    if not os.path.exists(main_folder_path):
        log_message(f"Main folder path does not exist: {main_folder_path}")
        return

    for root, dirs, _ in os.walk(main_folder_path):
        for sub_folder in dirs:
            if any(pattern in sub_folder for pattern in id2_list):
                sub_folder_path = os.path.join(root, sub_folder)
                log_message(f"Processing subfolder: {sub_folder_path}")

                latest_file = None
                latest_file_mtime = 0
                for root, _, files in os.walk(sub_folder_path):
                    for file in files:
                        if "evidencedocument" in file.lower() and file.lower().endswith(".xlsx"):
                            file_path = os.path.join(root, file)
                            file_mtime = os.path.getmtime(file_path)
                            if file_mtime > latest_file_mtime:
                                latest_file = file_path
                                latest_file_mtime = file_mtime

                if latest_file:
                    record = {
                        "MainFolder": main_folder,
                        "SubFolder": sub_folder,
                        "FileName": os.path.basename(latest_file),
                        "ModifiedDate": pd.to_datetime(latest_file_mtime, unit='s'),
                        "SizeKB": os.path.getsize(latest_file) / 1024,
                        "SheetNames": get_excel_sheet_names(latest_file)
                    }

                    sheet_names = record["SheetNames"].split(", ")
                    sheet_data, missed_data = get_sheet_content(latest_file, sheet_names)
                    combined_sheet_data.extend(sheet_data)
                    missed_entries.extend(missed_data)

                    total_entries = len(sheet_data)
                    total_missed_entries = len(missed_data)
                    percent_completion = round(((total_entries - total_missed_entries) / total_entries) * 100, 2) if total_entries else 0

                    summary_sheet_stats.append({
                        "MainFolder": main_folder,
                        "SubFolder": sub_folder,
                        "FileName": os.path.basename(latest_file),
                        "TemplateUsed": "Yes",
                        "SheetNames": record["SheetNames"],
                        "TotalEntries": total_entries,
                        "TotalMissedEntries": total_missed_entries,
                        "PercentCompletion": percent_completion
                    })

                    try:
                        summary_data = pd.read_excel(latest_file, sheet_name="Summary")
                        dms_files = summary_data['DMS file name'].dropna().tolist()
                        for dms_file in dms_files:
                            dms_presence = "Yes" if any(dms_file in f for f in find_all_files(sub_folder_path)) else "No"
                            combined_summary.append({
                                "MainFolder": main_folder,
                                "SubFolder": sub_folder,
                                "FileName": os.path.basename(latest_file),
                                "DMSFileName": dms_file,
                                "DMSPresence": dms_presence
                            })
                    except Exception as e:
                        log_message(f"Error reading summary sheet from {latest_file}: {e}")

                    copy_file_to_destination(latest_file, destination_path)
                else:
                    record = {
                        "MainFolder": main_folder,
                        "SubFolder": sub_folder,
                        "FileName": "No ED file",
                        "ModifiedDate": None,
                        "SizeKB": None,
                        "SheetNames": None
                    }

                clearance_email = next((file for file in find_all_files(sub_folder_path) if "clear" in file.lower() and file.lower().endswith(".msg")), None)
                evidence_workbook = next((file for file in find_all_files(sub_folder_path) if "evidenceworkbook" in file.lower() and file.lower().endswith(".xlsx")), None)
                peer_review_workbook = next((file for file in find_all_files(sub_folder_path) if "peerworkbook" in file.lower() and file.lower().endswith(".xlsx")), None)
                prescreen_workbook = next((file for file in find_all_files(sub_folder_path) if "prescreenworkbook" in file.lower() and file.lower().endswith(".xlsx")), None)
                daq_workbook = next((file for file in find_all_files(sub_folder_path) if "daqworkbook" in file.lower() and file.lower().endswith(".xlsx")), None)

                file_info.append({
                    "MainFolder": main_folder,
                    "SubFolder": sub_folder,
                    "EDPresence": "Yes" if latest_file else "No",
                    "ClearanceEmail": f"Yes ({clearance_email})" if clearance_email else "No",
                    "EvidenceWorkbook": f"Yes ({evidence_workbook})" if evidence_workbook else "No",
                    "PeerReviewWorkbook": f"Yes ({peer_review_workbook})" if peer_review_workbook else "No",
                    "PreScreenWorkbook": f"Yes ({prescreen_workbook})" if prescreen_workbook else "No",
                    "DAQworkbook": f"Yes ({daq_workbook})" if daq_workbook else "No",
                    "AllFileNames": "; ".join([os.path.basename(f) for f in find_all_files(sub_folder_path)])
                })

                results.append(record)

with ThreadPoolExecutor(max_workers=5) as executor:
    executor.map(process_folder, id1_list)

# Convert the results to DataFrames
df_summary_sheet_stats = pd.DataFrame(summary_sheet_stats)
df_combined_sheet_data = pd.DataFrame(combined_sheet_data)
df_missed_entries = pd.DataFrame(missed_entries)
df_combined_summary = pd.DataFrame(combined_summary)
df_file_info = pd.DataFrame(file_info)

# Save the DataFrames to Excel
with pd.ExcelWriter(os.path.join(destination_path, "FullReport.xlsx"), engine='openpyxl') as writer:
    df_summary_sheet_stats.to_excel(writer, sheet_name="EDSummary", index=False)
    df_combined_sheet_data.to_excel(writer, sheet_name="CombinedSheets", index=False)
    df_missed_entries.to_excel(writer, sheet_name="MissedEntries", index=False)
    df_combined_summary.to_excel(writer, sheet_name="CombinedSummary", index=False)
    df_file_info.to_excel(writer, sheet_name="File_Info", index=False)

log_message("Excel files have been created successfully.")
