%let base_path = C:\Your\BasePath;
%let destination_path = \\server.com\folder1\folder2;
%let id1_list = 12345,23456;
%let id2_list = 2345,3456;


/* Define the Python executable path and the script path */
%let python_exe = C:\Path\To\python.exe;
%let python_script = C:\Path\To\process_folders.py;

/* Call the Python script with macro variables */
systask command "&python_exe &python_script --base_path &base_path --destination_path &destination_path --id1 &id1_list --id2 &id2_list"
   taskname=process_folders
   status=process_status;

/* Wait for the task to complete */
waitfor _all_ process_folders;

/* Check the status of the task */
%if &process_status ne 0 %then %do;
   %put ERROR: The Python script failed.;
%end;
%else %do;
   %put The Python script completed successfully.;
%end;



import os
import shutil
import pandas as pd
from openpyxl import load_workbook
from concurrent.futures import ThreadPoolExecutor
import argparse

# Parse command-line arguments
parser = argparse.ArgumentParser(description='Process folders.')
parser.add_argument('--base_path', required=True, help='Base path where main folders are located')
parser.add_argument('--destination_path', required=True, help='Destination path to copy files')
parser.add_argument('--id1', required=True, help='Comma-separated list of ID1 values')
parser.add_argument('--id2', required=True, help='Comma-separated list of ID2 values')
args = parser.parse_args()

base_path = args.base_path
destination_path = args.destination_path
id1_list = args.id1.split(",")
id2_list = args.id2.split(",")

# Ensure the destination path exists
os.makedirs(destination_path, exist_ok=True)

results = []
summary_sheet_stats = []
combined_sheet_data = []
missed_entries = []
combined_summary = []
file_info = []

def log_message(message):
    print(message)

def get_excel_sheet_names(file_path):
    workbook = load_workbook(file_path, read_only=True)
    sheet_names = workbook.sheetnames
    workbook.close()
    return ", ".join(sheet_names)

def get_sheet_content(file_path, sheet_names):
    filtered_data = []
    missed_entries_local = []
    for sheet_name in sheet_names:
        if any(sheet_name.startswith(str(num)) for num in range(101, 121)) or \
           any(sheet_name.startswith(str(num)) for num in range(201, 233)) or \
           any(sheet_name.startswith(str(num)) for num in range(301, 321)):
            df = pd.read_excel(file_path, sheet_name=sheet_name)
            for _, row in df.iterrows():
                if isinstance(row['C'], str) and row['C'].endswith(":") and \
                   isinstance(row['D'], str) and row['D'] not in ["PASS", "NA", "YES", "NO"]:
                    filtered_row = {
                        "MainFolder": file_path.split(os.sep)[-3],
                        "SubFolder": file_path.split(os.sep)[-2],
                        "FileName": os.path.basename(file_path),
                        "SheetName": sheet_name,
                        "Question": row['C'],
                        "Answer": row['D']
                    }
                    filtered_data.append(filtered_row)
                    if pd.isnull(row['D']):
                        missed_entries_local.append(filtered_row)
    return filtered_data, missed_entries_local

def copy_file_to_destination(source_path, destination_folder):
    os.makedirs(destination_folder, exist_ok=True)
    shutil.copy2(source_path, destination_folder)

def process_folder(main_folder):
    main_folder_path = os.path.join(base_path, main_folder)
    log_message(f"Processing main folder: {main_folder_path}")
    
    if not os.path.exists(main_folder_path):
        log_message(f"Main folder path does not exist: {main_folder_path}")
        return

    for root, dirs, files in os.walk(main_folder_path):
        for sub_folder in dirs:
            if any(pattern in sub_folder for pattern in id2_list):
                sub_folder_path = os.path.join(root, sub_folder)
                log_message(f"Processing subfolder: {sub_folder_path}")

                latest_file = None
                latest_file_mtime = 0
                for file in os.listdir(sub_folder_path):
                    if "EvidenceDocument" in file and file.endswith(".xlsx"):
                        file_path = os.path.join(sub_folder_path, file)
                        file_mtime = os.path.getmtime(file_path)
                        if file_mtime > latest_file_mtime:
                            latest_file = file_path
                            latest_file_mtime = file_mtime

                if latest_file:
                    record = {
                        "MainFolder": main_folder,
                        "SubFolder": sub_folder,
                        "FileName": os.path.basename(latest_file),
                        "ModifiedDate": pd.to_datetime(latest_file_mtime, unit='s'),
                        "SizeKB": os.path.getsize(latest_file) / 1024,
                        "SheetNames": get_excel_sheet_names(latest_file),
                        "ALLfilenames": "; ".join(os.listdir(sub_folder_path))
                    }

                    sheet_names = record["SheetNames"].split(", ")
                    sheet_data, missed_data = get_sheet_content(latest_file, sheet_names)
                    combined_sheet_data.extend(sheet_data)
                    missed_entries.extend(missed_data)

                    total_entries = len(sheet_data)
                    total_missed_entries = len(missed_data)
                    percent_completion = round(((total_entries - total_missed_entries) / total_entries) * 100, 2) if total_entries else 0

                    summary_sheet_stats.append({
                        "MainFolder": main_folder,
                        "SubFolder": sub_folder,
                        "FileName": os.path.basename(latest_file),
                        "TemplateUsed": "Yes",
                        "SheetNames": record["SheetNames"],
                        "TotalEntries": total_entries,
                        "TotalMissedEntries": total_missed_entries,
                        "PercentCompletion": percent_completion
                    })

                    summary_data = pd.read_excel(latest_file, sheet_name="Summary")
                    dms_files = summary_data['DMS file name'].dropna().tolist()
                    for dms_file in dms_files:
                        dms_presence = "Yes" if dms_file in os.listdir(sub_folder_path) else "No"
                        combined_summary.append({
                            "MainFolder": main_folder,
                            "SubFolder": sub_folder,
                            "FileName": os.path.basename(latest_file),
                            "DMSFileName": dms_file,
                            "DMSPresence": dms_presence
                        })

                    copy_file_to_destination(latest_file, destination_path)
                else:
                    record = {
                        "MainFolder": main_folder,
                        "SubFolder": sub_folder,
                        "FileName": "No ED file",
                        "ModifiedDate": None,
                        "SizeKB": None,
                        "SheetNames": None,
                        "ALLfilenames": "; ".join(os.listdir(sub_folder_path))
                    }

                clearance_email = next((file for file in os.listdir(sub_folder_path) if "clear" in file and file.endswith(".msg")), None)
                evidence_workbook = next((file for file in os.listdir(sub_folder_path) if "Evidenceworkbook" in file and file.endswith(".xlsx")), None)
                peer_review_workbook = next((file for file in os.listdir(sub_folder_path) if "PeerReviewworkbook" in file and file.endswith(".xlsx")), None)
                prescreen_workbook = next((file for file in os.listdir(sub_folder_path) if "prescreenworkbook" in file and file.endswith(".xlsx")), None)
                daq_workbook = next((file for file in os.listdir(sub_folder_path) if "DAQworkbook" in file and file.endswith(".xlsx")), None)

                file_info.append({
                    "MainFolder": main_folder,
                    "SubFolder": sub_folder,
                    "EDPresence": "Yes" if latest_file else "No",
                    "ClearanceEmail": f"Yes ({clearance_email})" if clearance_email else "No",
                    "EvidenceWorkbook": f"Yes ({evidence_workbook})" if evidence_workbook else "No",
                    "PeerReviewWorkbook": f"Yes ({peer_review_workbook})" if peer_review_workbook else "No",
                    "PreScreenWorkbook": f"Yes ({prescreen_workbook})" if prescreen_workbook else "No",
                    "DAQworkbook": f"Yes ({daq_workbook})" if daq_workbook else "No",
                    "AllFileNames": "; ".join(os.listdir(sub_folder_path))
                })

                results.append(record)

with ThreadPoolExecutor(max_workers=5) as executor:
    executor.map(process_folder, id1_list)

# Convert the results to DataFrames
df_results = pd.DataFrame(results)
df_summary_sheet_stats = pd.DataFrame(summary_sheet_stats)
df_combined_sheet_data = pd.DataFrame(combined_sheet_data)
df_missed_entries = pd.DataFrame(missed_entries)
df_combined_summary = pd.DataFrame(combined_summary)
df_file_info = pd.DataFrame(file_info)

# Save the DataFrames to Excel
with pd.ExcelWriter(os.path.join(destination_path, "FullReport.xlsx"), engine='openpyxl') as writer:
    df_results.to_excel(writer, sheet_name="Evidence Document Summary", index=False)
    df_summary_sheet_stats.to_excel(writer, sheet_name="EDSummary", index=False)
    df_combined_sheet_data.to_excel(writer, sheet_name="CombinedSheets", index=False)
    df_missed_entries.to_excel(writer, sheet_name="MissedEntries", index=False)
    df_combined_summary.to_excel(writer, sheet_name="CombinedSummary", index=False)
    df_file_info.to_excel(writer, sheet_name="File_Info", index=False)

log_message("Excel files have been created successfully.")
