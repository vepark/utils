# PowerShell Script updated on 2024-05-29 at 00:00

param (
    [string]$BasePath = "\\server.com\folder1\folder2",
    [string]$DestinationPath = "\\server.com\folder1\folder2\output",
    [string]$ID1 = "12345,23456",
    [string]$ID2 = "2345,3456"
)

# Convert comma-separated strings to arrays
$ID1Array = $ID1 -split ","
$ID2Array = $ID2 -split ","

# Ensure the destination path exists
if (-not (Test-Path -Path $DestinationPath)) {
    New-Item -ItemType Directory -Path $DestinationPath | Out-Null
}

# Define the global results arrays
$global:results = @()
$global:combinedSheets = @()
$global:missedEntries = @()
$global:combinedSummary = @()
$global:fileInfo = @()

function Log-Message {
    param (
        [string]$message
    )
    Write-Host $message
}

function Get-ExcelSheetNames {
    param (
        [string]$filePath
    )
    try {
        Log-Message "Reading sheet names from $filePath"
        $excel = Open-ExcelPackage -Path $filePath
        $sheetNames = $excel.Workbook.Worksheets | Select-Object -ExpandProperty Name
        $excel.Dispose()
        Log-Message "Found sheets: $sheetNames"
        return $sheetNames
    } catch {
        Log-Message "Error reading sheet names from $($filePath): $($_)"
        return @()
    }
}

function Process-Sheets {
    param (
        [string]$filePath,
        [array]$requiredSheets,
        [string]$mainFolder,
        [string]$subFolder,
        [string]$remda
    )
    $entryCount = 0
    $totalCount = 0
    $missedCount = 0

    try {
        $excel = Open-ExcelPackage -Path $filePath
        foreach ($sheet in $requiredSheets) {
            $worksheet = $excel.Workbook.Worksheets[$sheet]
            $lastRow = $worksheet.Dimension.End.Row

            for ($row = 1; $row -le $lastRow; $row++) {
                $question = $worksheet.Cells[$row, 3].Text
                $answer = $worksheet.Cells[$row, 4].Text
                if ($answer -eq "") { $answer = $worksheet.Cells[$row, 5].Text }
                if ($answer -eq "") { $answer = $worksheet.Cells[$row, 6].Text }
                if ($answer -eq "") { $answer = $worksheet.Cells[$row, 7].Text }

                if ($question -match ":$" -and -not $question.StartsWith("Note:")) {
                    $totalCount++
                    if ($answer -notmatch "^(YES|NO|PASS|NA)/(YES|NO|PASS|NA)$") {
                        if ($answer -match "^(YES|NO|PASS|NA)$") {
                            $entryCount++
                        } else {
                            $answer = ""
                        }

                        $global:combinedSheets += [PSCustomObject][ordered]@{
                            MainFolder = $mainFolder
                            SubFolder  = $subFolder
                            REMDA      = $remda
                            SheetName  = $sheet
                            Question   = $question
                            Answer     = $answer
                        }

                        if ($answer -eq "") {
                            $missedCount++
                            $global:missedEntries += [PSCustomObject][ordered]@{
                                MainFolder = $mainFolder
                                SubFolder  = $subFolder
                                REMDA      = $remda
                                SheetName  = $sheet
                                Question   = $question
                                Answer     = $answer
                            }
                        }
                    }
                }
            }
        }
        $excel.Dispose()
    } catch {
        Log-Message "Error processing sheets from $($filePath): $($_)"
    }

    return @{
        TotalEntries = $entryCount
        TotalCounts  = $totalCount
        MissedEntries = $missedCount
        PercentCompletion = if ($totalCount -gt 0) { [math]::Round(($entryCount / $totalCount) * 100, 2) } else { 0 }
    }
}

function Analyze-SummarySheet {
    param (
        [string]$filePath,
        [string]$mainFolder,
        [string]$subFolder,
        [string]$remda
    )
    try {
        $excel = Open-ExcelPackage -Path $filePath
        $worksheet = $excel.Workbook.Worksheets["Summary"]

        if ($worksheet -ne $null) {
            $startRow = ($worksheet.Cells["A5:A20"] | Where-Object { $_.Text -match "Artifacts" }).Row
            if ($startRow -ne $null) {
                $lastRow = $worksheet.Dimension.End.Row
                for ($row = $startRow + 1; $row -le $lastRow; $row++) {
                    $artifactRow = $worksheet.Cells[$row, "A"].Text
                    if ($artifactRow -eq "") { break }

                    $global:combinedSummary += [PSCustomObject][ordered]@{
                        MainFolder   = $mainFolder
                        SubFolder    = $subFolder
                        REMDA        = $remda
                        ColumnA      = $worksheet.Cells[$row, "A"].Text
                        ColumnB      = $worksheet.Cells[$row, "B"].Text
                        ColumnC      = $worksheet.Cells[$row, "C"].Text
                        ColumnD      = $worksheet.Cells[$row, "D"].Text
                        ColumnE      = $worksheet.Cells[$row, "E"].Text
                        ColumnF      = $worksheet.Cells[$row, "F"].Text
                    }
                }
            }
        }
        $excel.Dispose()
    } catch {
        Log-Message "Error processing summary sheet from $($filePath): $($_)"
    }
}

function Process-Folder {
    param (
        [string]$mainFolder
    )
    $mainFolderPath = Join-Path -Path $BasePath -ChildPath $mainFolder
    Log-Message "Processing main folder: $mainFolderPath"
    
    if (-not (Test-Path -Path $mainFolderPath)) {
        Log-Message "Main folder path does not exist: $mainFolderPath"
        return
    }

    $subFolders = Get-ChildItem -Path $mainFolderPath -Recurse -Directory | ForEach-Object {
        $_.FullName
    }

    foreach ($subFolderPath in $subFolders) {
        $subFolder = Get-Item -Path $subFolderPath
        $matchesID2 = $false
        $remda = ""

        foreach ($id2 in $ID2Array) {
            if ($subFolder.Name -like "*$id2*") {
                $matchesID2 = $true
                $remda = $id2
                break
            }
        }

        if ($matchesID2) {
            Log-Message "Processing subfolder: $subFolderPath"

            $latestFile = $null
            foreach ($id2 in $ID2Array) {
                $latestFile = Get-ChildItem -Path $subFolderPath -Recurse -File -Filter "*Evidence*Document*$id2*.xlsx" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
                if ($latestFile) {
                    break
                }
            }

            $allFileNames = (Get-ChildItem -Path $subFolderPath -Recurse -File | Select-Object -ExpandProperty Name) -join "; "
            # Deduplicate file names within each cell
            $allFileNames = ($allFileNames -split "; " | Sort-Object -Unique) -join "; "

            $record = [PSCustomObject][ordered]@{
                MainFolder      = $mainFolder
                SubFolder       = $subFolder.Name
                REMDA           = $remda
                FileName        = if ($latestFile) { $latestFile.Name } else { "" }
                EDPresent       = if ($latestFile) { "Yes" } else { "No" }
                SheetNames      = ""
                NumOfSheets     = 0
                TemplateUsed    = "NO"
                TotalEntries    = 0
                MissedEntries   = 0
                TotalCounts     = 0
                PercentCompletion = 0
            }

            if ($latestFile) {
                $sheetNames = Get-ExcelSheetNames -filePath $latestFile.FullName
                Log-Message "Sheet names type: $($sheetNames.GetType().Name)"
                Log-Message "Sheet names count: $($sheetNames.Count)"
                if ($sheetNames.Count -gt 0) {
                    $requiredSheets = $sheetNames | Where-Object { $_ -match "^(101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|219|220|221|222|223|224|225|226|227|228|229|230|231|232|301|302|303|304|305|306|307|308|309|310|311|312|313|314|315|316|317|318|319|320|Summary)$" }
                    Log-Message "Required sheets: $($requiredSheets -join ', ')"
                    $record.SheetNames = ($requiredSheets -join ", ")
                    $record.NumOfSheets = $requiredSheets.Count

                    if (($requiredSheets -match "^101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120$" -and $requiredSheets.Count -eq 21) -or
                        ($requiredSheets -match "^201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|219|220|221|222|223|224|225|226|227|228|229|230|231|232$" -and $requiredSheets.Count -ge 31) -or
                        ($requiredSheets -match "^301|302|303|304|305|306|307|308|309|310|311|312|313|314|315|316|317|318|319|320$" -and $requiredSheets.Count -eq 21)) {
                        $record.TemplateUsed = "YES"
                    }

                    $sheetData = Process-Sheets -filePath $latestFile.FullName -requiredSheets $requiredSheets -mainFolder $mainFolder -subFolder $subFolder.Name -remda $remda
                    $record.TotalEntries = $sheetData.TotalEntries
                    $record.TotalCounts = $sheetData.TotalCounts
                    $record.MissedEntries = $sheetData.MissedEntries
                    $record.PercentCompletion = $sheetData.PercentCompletion

                    Analyze-SummarySheet -filePath $latestFile.FullName -mainFolder $mainFolder -subFolder $subFolder.Name -remda $remda
                } else {
                    $record.SheetNames = ""
                    $record.NumOfSheets = 0
                    $record.TemplateUsed = "NO"
                }
            }

            $global:fileInfo += [PSCustomObject][ordered]@{
                MainFolder        = $mainFolder
                SubFolder         = $subFolder.Name
                REMDA             = $remda
                AllFileNames      = $allFileNames
                EDPresent         = if ($allFileNames -match "\bEvidence.*Document.*\.xlsx\b") { ($allFileNames -split "; " | Where-Object { $_ -match "\bEvidence.*Document.*\.xlsx\b" }) -join "; " } else { "No" }
                ClearanceEmail    = if ($allFileNames -match "\bclear.*\.msg\b") { ($allFileNames -split "; " | Where-Object { $_ -match "\bclear.*\.msg\b" }) -join "; " } else { "No" }
                EvidenceWorkbook  = if ($allFileNames -match "\bEvidence.*Workbook.*\.xlsx\b") { ($allFileNames -split "; " | Where-Object { $_ -match "\bEvidence.*Workbook.*\.xlsx\b" }) -join "; " } else { "No" }
                PeerReviewWorkbook = if ($allFileNames -match "\bPeer.*Workbook.*\.xlsx\b") { ($allFileNames -split "; " | Where-Object { $_ -match "\bPeer.*Workbook.*\.xlsx\b" }) -join "; " } else { "No" }
                PreScreenWorkbook = if ($allFileNames -match "\bPreScreen.*Workbook.*\.xlsx\b") { ($allFileNames -split "; " | Where-Object { $_ -match "\bPreScreen.*Workbook.*\.xlsx\b" }) -join "; " } else { "No" }
                DAQCWorkbook      = if ($allFileNames -match "\bDAQC Workbook\.xlsx\b") { ($allFileNames -split "; " | Where-Object { $_ -match "\bDAQC Workbook\.xlsx\b" }) -join "; " } else { "No" }
            }

            Log-Message "Adding record: $($record | Out-String)"
            $global:results += $record

            # Verify each addition to the results array
            Log-Message "Current results count: $($global:results.Count)"
        }
    }
}

foreach ($mainFolder in $ID1Array) {
    Process-Folder -mainFolder $mainFolder
}

# Verify the results array before exporting
Log-Message "Final results array contains $($global:results.Count) items"

# Export results to Excel
$excelPath = Join-Path -Path $DestinationPath -ChildPath "FullReport.xlsx"

Log-Message "Exporting results to Excel"
if ($global:results.Count -gt 0) {
    $global:results | Export-Excel -Path $excelPath -WorksheetName "EDSummary" -AutoSize -AutoFilter
    $global:combinedSheets | Export-Excel -Path $excelPath -WorksheetName "CombinedSheets" -AutoSize -AutoFilter -Append
    $global:missedEntries | Export-Excel -Path $excelPath -WorksheetName "MissedEntries" -AutoSize -AutoFilter -Append
    $global:combinedSummary | Export-Excel -Path $excelPath -WorksheetName "CombinedSummary" -AutoSize -AutoFilter -Append
    $global:fileInfo | Export-Excel -Path $excelPath -WorksheetName "FileInfo" -AutoSize -AutoFilter -Append
    Log-Message "Excel file has been created successfully at $excelPath."

    # Wrap text in specific columns
    $sheet = Open-ExcelPackage -Path $excelPath
    $edSummarySheet = $sheet.Workbook.Worksheets["EDSummary"]
    $edSummarySheet.Column(4).Style.WrapText = $true  # Wrap text for SheetNames column

    # Wrap text in CombinedSheets and MissedEntries
    foreach ($worksheet in $sheet.Workbook.Worksheets["CombinedSheets", "MissedEntries"]) {
        $worksheet.Cells.Style.WrapText = $true
    }

    # Adjust column width for AllFileNames in FileInfo
    $fileInfoSheet = $sheet.Workbook.Worksheets["FileInfo"]
    $fileInfoSheet.Column(4).Width = 100

    $sheet.Save()
    $sheet.Dispose()
} else {
    Log-Message "No data to export."
}
