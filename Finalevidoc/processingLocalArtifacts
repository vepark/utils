# Define parameters
param (
    [string]$SourcePath = "C:\path\to\local\artifacts",
    [string]$DestinationPath = "C:\path\to\destination\folders",
    [string]$ExcelFilePath = "C:\path\to\destination\FullReport.xlsx"
)

# Ensure the destination path exists
if (-not (Test-Path -Path $DestinationPath)) {
    New-Item -ItemType Directory -Path $DestinationPath | Out-Null
}

# Define global result arrays
$global:edSummary = @()
$global:combinedSheets = @()
$global:missedEntries = @()

# Function to log messages
function Log-Message {
    param (
        [string]$message
    )
    Write-Host "$(Get-Date -Format "yyyy-MM-dd HH:mm:ss") - $message"
}

# Function to process sheets
function Process-Sheets {
    param (
        [string]$filePath,
        [string]$idList
    )

    $excel = Open-ExcelPackage -Path $filePath

    # Get the file modified date
    $modifiedDate = (Get-Item -Path $filePath).LastWriteTime

    # CombinedSheets
    $sheetRanges = @("101-120", "201-232", "301-320")
    $combinedSheetsData = @()
    $sheetNames = @()
    $totalEntries = 0
    $missedEntries = 0
    $templateUsed = "NO"

    foreach ($range in $sheetRanges) {
        $startRange = $range.Split('-')[0]
        $endRange = $range.Split('-')[1]

        for ($i = [int]$startRange; $i -le [int]$endRange; $i++) {
            $sheetName = $i.ToString()
            $sheet = $excel.Workbook.Worksheets[$sheetName]

            if ($sheet) {
                $sheetNames += $sheetName
                $startRow = 2
                $endRow = $sheet.Dimension.End.Row
                $numEntries = 0

                for ($row = $startRow; $row -le $endRow; $row++) {
                    $question = $sheet.Cells[$row, 3].Text
                    $answer = ""

                    if ($sheet.Cells[$row, 4].Text -ne "") {
                        $answer = $sheet.Cells[$row, 4].Text
                    } elseif ($sheet.Cells[$row, 5].Text -ne "") {
                        $answer = $sheet.Cells[$row, 5].Text
                    } elseif ($sheet.Cells[$row, 6].Text -ne "") {
                        $answer = $sheet.Cells[$row, 6].Text
                    } elseif ($sheet.Cells[$row, 7].Text -ne "") {
                        $answer = $sheet.Cells[$row, 7].Text
                    }

                    if ($question -ne "" -and $question -notmatch "^Note:" -and $question -match ":$" -and $answer -notmatch "PASS/NA" -and $answer -notmatch "YES/NO") {
                        $numEntries++
                        $totalEntries++
                        $combinedSheetsData += [PSCustomObject]@{
                            IDList = $idList
                            SheetName = $sheetName
                            Question = $question
                            Answer = $answer
                        }
                    } else {
                        $missedEntries++
                    }
                }

                # Check if the template was used based on the sheet range and entry count
                if (($sheetName -match "101" -and $numEntries -ge 21) -or
                    ($sheetName -match "201" -and $numEntries -ge 31) -or
                    ($sheetName -match "301" -and $numEntries -ge 21)) {
                    $templateUsed = "YES"
                }
            }
        }
    }

    # MissedEntries
    $missedEntriesData = $combinedSheetsData | Where-Object { $_.Answer -eq "" }

    $numSheets = $sheetNames.Count
    $totalCounts = $totalEntries + $missedEntries
    $percentCompletion = if ($totalCounts -gt 0) { [math]::Round(($totalEntries / $totalCounts) * 100, 2) } else { 0 }

    $edSummaryData = [PSCustomObject]@{
        IDList = $idList
        Filename = [System.IO.Path]::GetFileName($filePath)
        SheetNames = $sheetNames -join ", "
        NumofSheets = $numSheets
        TemplateUsed = $templateUsed
        TotalEntries = $totalEntries
        MissedEntries = $missedEntries
        TotalCounts = $totalCounts
        PercentCompletion = "$percentCompletion%"
        ModifiedDate = $modifiedDate
    }

    $excel.Dispose()
    return @{
        EDSummary = $edSummaryData
        CombinedSheets = $combinedSheetsData
        MissedEntries = $missedEntriesData
    }
}

# Function to append new data and dedupe
function Append-And-Dedupe {
    param (
        [string]$sheetName,
        [array]$newData,
        [string]$excelFilePath
    )

    $existingData = @()
    if (Test-Path -Path $excelFilePath) {
        $existingData = Import-Excel -Path $excelFilePath -WorksheetName $sheetName
    }

    $combinedData = $existingData + $newData
    $dedupedData = $combinedData | Sort-Object -Unique

    return $dedupedData
}

# Loop through each file in the source path
$files = Get-ChildItem -Path $SourcePath -Filter "*Evidence*Document*.xlsx"
foreach ($file in $files) {
    $fileName = $file.Name
    $idList = $fileName -replace ".*Evidence.*Document", "" -replace ".xlsx", ""

    $result = Process-Sheets -filePath $file.FullName -idList $idList
    $global:edSummary += $result.EDSummary
    $global:combinedSheets += $result.CombinedSheets
    $global:missedEntries += $result.MissedEntries
}

# Append new data and dedupe for EDSummary
$dedupedEDSummary = Append-And-Dedupe -sheetName "EDSummary" -newData $global:edSummary -excelFilePath $ExcelFilePath
$dedupedCombinedSheets = Append-And-Dedupe -sheetName "CombinedSheets" -newData $global:combinedSheets -excelFilePath $ExcelFilePath
$dedupedMissedEntries = Append-And-Dedupe -sheetName "MissedEntries" -newData $global:missedEntries -excelFilePath $ExcelFilePath

# Create a new Excel package or open existing one
if (Test-Path -Path $ExcelFilePath) {
    $excelPackage = Open-ExcelPackage -Path $ExcelFilePath
} else {
    $excelPackage = New-ExcelPackage
}

# Add or update EDSummary sheet
$worksheet = $excelPackage.Workbook.Worksheets["EDSummary"]
if ($worksheet) {
    $excelPackage.Workbook.Worksheets.Delete($worksheet)
}
$worksheet = $excelPackage.Workbook.Worksheets.Add("EDSummary")
$dedupedEDSummary | Export-Excel -Worksheet $worksheet -AutoSize -AutoFilter
Log-Message "EDSummary sheet has been updated."

# Add or update CombinedSheets sheet
$worksheet = $excelPackage.Workbook.Worksheets["CombinedSheets"]
if ($worksheet) {
    $excelPackage.Workbook.Worksheets.Delete($worksheet)
}
$worksheet = $excelPackage.Workbook.Worksheets.Add("CombinedSheets")
$dedupedCombinedSheets | Export-Excel -Worksheet $worksheet -AutoSize -AutoFilter
Log-Message "CombinedSheets sheet has been updated."

# Add or update MissedEntries sheet
$worksheet = $excelPackage.Workbook.Worksheets["MissedEntries"]
if ($worksheet) {
    $excelPackage.Workbook.Worksheets.Delete($worksheet)
}
$worksheet = $excelPackage.Workbook.Worksheets.Add("MissedEntries")
$dedupedMissedEntries | Export-Excel -Worksheet $worksheet -AutoSize -AutoFilter
Log-Message "MissedEntries sheet has been updated."

# Save the Excel package
$excelPackage.SaveAs((Join-Path -Path $DestinationPath -ChildPath "FullReport.xlsx"))
Log-Message "FullReport.xlsx has been created successfully at $DestinationPath."
