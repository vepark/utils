import fitz  # PyMuPDF
import os
import re
import pandas as pd
from nltk.corpus import words
from nltk.tokenize import word_tokenize
from collections import Counter
import nltk

# Ensure necessary NLTK data is available
nltk.download('punkt')
nltk.download('words')

# Prepare the set of English words
english_words = set(words.words())

def process_pdf_file(file_path, start_phrase, end_phrase):
    """
    Process a single PDF file to extract the section between start_phrase and end_phrase,
    remove English words, keep uppercase with underscore and dot, and count occurrences.
    """
    # Open the PDF and extract all text
    doc = fitz.open(file_path)
    text = ""
    for page in doc:
        text += page.get_text()
    doc.close()
    
    # Extract the relevant section
    try:
        start_idx = text.index(start_phrase) + len(start_phrase)
        end_idx = text.index(end_phrase, start_idx)
        relevant_section = text[start_idx:end_idx]
    except ValueError:
        # If start or end phrase not found, skip this file
        return Counter()
    
    # Tokenize, filter, and count database.table patterns
    tokens = word_tokenize(relevant_section)
    filtered_tokens = [token for token in tokens if re.match(r'^[A-Z]+_[A-Z]+\.[A-Z]+$', token) and token.lower() not in english_words]
    return Counter(filtered_tokens)

def process_folder(folder_path, start_phrase, end_phrase, output_path):
    """
    Process all PDF files in a folder, extracting and counting database.table combinations.
    """
    results = []
    for filename in os.listdir(folder_path):
        if filename.endswith('.pdf'):
            file_path = os.path.join(folder_path, filename)
            counts = process_pdf_file(file_path, start_phrase, end_phrase)
            for db_table, count in counts.items():
                results.append({'Filename': filename, 'DatabaseTable': db_table, 'Count': count})
    
    # Save the results to an Excel file
    df = pd.DataFrame(results)
    df.to_excel(output_path, index=False)

# Configuration
folder_path = '/path/to/pdf/folder'
start_phrase = 'Start of the section'
end_phrase = 'End of the section'
output_path = '/path/to/output/results.xlsx'

# Process the folder and save results to an Excel file
process_folder(folder_path, start_phrase, end_phrase, output_path)
